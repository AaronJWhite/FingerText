= FingerText

Tab triggered snippet plugin for Notepad++.

== Description

FingerText is a tab triggered snippet plugin for Notepad++. Support global snippets and snippets for each file extension or file name, hotspots navigation, multiple hotspots simultaneous editing, hotspot text hint(instead of just a $ or # sign) and hotspot default value. Comments can be added to snippets. It also features a SnippetDock which shows a list of currently available snippets. (see screenshots) You can import or export your snippets and share it to others.

If you are new to FingerText, follow the "Install", "Importing Sample Snippets" and "Basic Usage" sections in this file. That should give you a step by step tutorial on how to use FingerText.

== Development Status

This plugin is still in Alpha stage so do expect that it can be buggy. The development direction is to make it at least a working snippet plugin, and probably a tab triggered simple command plugin, a convenient console in the editor and finally snippets plugin with ruby scripting support.

I am still experimenting different methods, so do expect non-backward compatible changes (just like the migration to sqlite3 from 0.3.2 to 0.4.1) in future releases. Things are getting more stable once I implement the "inline scripting" and "dynamic hotspots" features. I keep saying this because I am more than happy if people want to make snippets for this plugin and start using it. But as an ethical programmer I do not want to waste people's effort. And more importantly the project is really under active development so a stable version (at least an API stable version) is coming SOON.

== Screenshots

Screenshot is available here:

https://github.com/downloads/erinata/FingerText/ScreenClip.png

== Install

Download the file "FingerText - 0.4.4.zip" at 
https://github.com/downloads/erinata/FingerText/FingerText%20-%200.4.4.zip

Unzip the package and copy the FingerText.dll to the plugins folder of Notepad++. This is the only file you need to run FingerText in notepad++.

The changelog.txt and readme.rdoc is for your reference. 

The SampleSnippets.ftd contains a bunch of sample snippets. You do NOT need to put this file into your plugin folder. Just put that somewhere you can find (say desktop)

== Importing Sample Snippets

You should have FingerText installed. If you are in doubt, go to the notepad++ menu, there should be "FingerText" undert "Plugins".

To import the sample snippets mentioned in the installation section, go to notepad++ menu > plugin > FingerText > Import Snippets.

Choose the file SampleSnippets.ftd and all the sample snippets will be installed. You should be able to find it in your download package or it can be in the plugin or config folder if you are installing FingerText through Plugin Manager. If you still cannot find it, go to https://github.com/downloads/erinata/FingerText/FingerText%20-%200.4.4.zip to download the file again and you should be able to get the file.

To verify you have imported the snippets correctly, go to notepad++ menu > Plugins > FingerText > Show SnippetDock. A Dialog with a list of available plugins should show up.

== Basic Usage

Here I assume the you have already install FingerText and imported the sample snippets. If you are not, please refer to previous sections.

Open a new file in notepad++ and go to notepad++ menu > Plugins > FingerText > Show SnippetDock. A Dialog with a list of available plugins should show up. Here you can see a list of available snippets. There is one of them called "<GLOBAL> num". "num" is the trigger text of the snippet. To trigger it, type in "num" (with out quotes) and hit the [Tab] key.

  num[Tab]

The trigger text disappear and it is replaced by a bunch of numbers.

That's it. You can try triggering others snippets in the list. Snippet can be as long as several paragraphs (try "lorem"). Or as short as just one word (try "npp")

  lorem[Tab]
  npp[Tab]

Some snippets are file specific. Try to open a new file and save it as "test.cpp".

You can see the SnippetDock is updated. There are a bunch of snippets added to the list. One of them is called "<.cpp> ios". Try triggering it inside the test.cpp.

  ios[Tab]
  
You can see the snippet is triggered and a bunch of code is inserted. This snippet is only available when your file has extension ".cpp". But you can still trigger the global snippets. (Try "num" in the test.cpp file)

As you may notice, <GLOBAL> indicates that the snippet is available anywhere, while <.cpp> snippets are only for .cpp files. The SnippetDock automatically updates the available snippets for your reference.

Apart from global and extension, there are some snippets which are Filename specific. You can try open a new file in notepad++ and save it as "Makefile" (with no extension and capital M). The SnippetDock will shows that there are some more snippets available for Makefile. (Try "simple")

You can trigger snippets anywhere in your document. the snippet will be inserted to the location where you type in the trigger text.

== Hotspots Navigation

Some snippets contain hotspots. For example, open a new file and trigger the snippet "mit". 

  mit[tab]

A sample of MIT license will appear in the editor. Notice that your caret is automatically moved to the "year" spot. Now type in 2011 and hit [Tab] again. The caret is now on the name spot and you can enter your name. Hit [Tab] after you enter you name will bring the caret to the end of the text. This is a very convenient way to fill in information while the snippet acts as a template file.

Some of the snippets contain multiple hotspots with the same name. For example you can trigger the snippet "awesome". Your cursor is on all three spots and anything you type will change all of them simultaneously. You can also try the snippet "for" in a .cpp file. Trigger the snippet and press the letter "i" once to change all the iteration variable to "i".

To see feature this in action, open a .cpp file and trigger the snippet "template". Use [tab] to navigate to each part and fill in the details. Now you have a working framework for your cpp main program. (Also see the snippet "simple" in Makefile)

== Creating and Editing Snippets

To create new snippets, click the create button at the SnippetDock. A new document is opened and you can edit the Trigger Text (line 10), Scope (line 12) and you can enter your snippet content on line 14 or below. REMEMBER to place a [>END<] at the end of the snippet. Click the save button when you finish editing.

To edit a snippet, select the snippet on the snippet list and click the edit button. The snippet is opened in a new file and you can edit the content. Click the save button when you finish editing.

The error checking is still very crappy and I will improve it in future release. At the moment, just be careful not to mess up the template when you are editing or creating snippets. If you are in doubt, you can always press the "create" button to get a fresh correct template.

Deleting a snippet is easy, just select the snippet and click the delete button.

== Advanced Snippet Editing

Other than plain text, you can put one or more Hotspots in you snippet.

Hotspots are indicated by $[![Whatever name]!]. The "Whatever name" can be a hint of the hotspot, or you can fill it with a default value. (If you type nothing and just hit tab, the hotspot $[![Whatever name]!] will be substituted by the string "Whatever name"(without quotes)). You may want to add a empty Hotspot (i.e. $[![]!]) at the location where you want the cursor to move to after tabbing through the last hotspot. Try to edit the sample snippets and use them as reference. 

Notice that hotspots with the same name will be highlighted at the same time. Try editing the snippet "for" which you have triggered in previous section. You can see that there are a bunch of $[![[var]]!], which will be highlighted simultaneously when the snippet is triggered.

Any thing after the [>END<] will not be inserted into the document so you can comment about your snippet there.

Chinese characters are supported in snippets. You can try it by triggering the snippet "chinese". All snippets should be encoded in UTF-8 and being triggered in UTF-8 document. Notice that Chinese character tag name are not supported. Actually sometimes it works sometimes it doesn't so it is not officially supported. 

== Snippets Backup and Sharing

To backup the snippets, you can go to notepad++ menu > Plugins > FingerText > Export Snippets. Choose a file name (which extension .ftd) and the snippets are exported. You can import them in the same way as importing the sample snippets.

The .ftd files are in plain text so you can edit them directly too. But don't do that unless you know what you are doing because this can cause serious problem in importing and exporting. Editing .ftd files is not officially supported.

If you use sqlite, you can directly edit the snippet database too. It is not officially supported though.

== Upgrading from 0.4.1

If you want to use your snippets after you upgrade to 0.4.4, you can go to the %Notepad++ folder%\plugins\FingerText and get the old database file Snippets.db3. Rename is to FingerText.db3 and move it to the config folder after update.

== Upgrading from 0.3.5 or below

FingerText 0.3.5 or below use a "one snippet per file" system to store snippets, which is not compatibile with current version. If you really have a lot of snippets created using these early version, please send your snippet to erinata@gmail.com. I will try my best to import them into the database in the current version.


== Change log 
(for full change log (including the development log) please refer to the CHANGELOG file in the repository)

0.4.4
Implemented Snippets import and export function. Change the database storage location to the config folder. (Should solve the problem of snippet not saving correctly under Windows 7 and Vista)
A better step by step tutorial for people who are new to snippets

0.4.1
Fixing the version number problem of 0.4.0

0.4.0
First stable version using sqlite3. 

0.3.11
Using Sqlite to store snippets instead of using recusive file system.
Add Snippet Dock, which shows all available snippets according to the curent file.
Implemented Create Edit and Delete from the snippet dock.
Impletmented Double Click insert snippet function.

0.3.2
Last stable version using the recusive file system to store snippets. All the snippets create under this version will not work in version later than FingerText - 0.3.5

0.3.0
Implemented Snippet set for specific file name.
The priority is FileName > Ext > Global
performance improvement to path search

0.2.6
Multiple hotspots selection and hotspot hint text replacement works simultaneously

0.2.0
Fixed long tab problem
Fixed Spaces or tabspaces before tab problem
Fixed empty snippet problem
Emulate tab behaviour when no tag match or selection is rectangle
Snippet insertion recorded as one single undo step

0.1.0 
First Alpha verison. Implemented basic tab trigger snippets and hotspots navigation

== Tested with

- Notepad++ 3.8.6(Unicode), Windows 7 Ultimate 64bit 

== To Do List

- Dynamic Snippets

- More efficient import and export

- More fault tolerant snippet editor.

- Snippet Preview

== Credits

Thanks Don Ho for making Notepad++ and providing a flexible and well documented api for plugin programming. Thanks Dave Brotherstone for his helpful comments and programmming help (especially for the sqlite support fork). Thanks Tsz Kin Chan for his suggestions on the UI. Also thanks for all the comments from sourceforge forum.  

== License

This plugin is built using the NppPluginTemplate provided by Don Ho. The license of the template is included in the source.

The plugin is released under MIT license.

MIT license

Copyright (C) 2011 by Tom Lam

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.